Input Sorted: BINARY SEARCH
Max of Min / Min of Max: BINARY SEARCH
Generate all ways (count/best way/min-max): RECURSION => DYNAMIC PROGRAMMING
Counting unique: HASHING
Dimensions of binary tree: STACK/QUEUE (run till empty) or HEIGHT OF TREE MANIPULATION

Recurrence Relationship Shortcut
-Try to represent problem in terms of index
-Perform all possible operations on index according to problem statement
-If count all ways, find sum of all results
-If min/max, find min/max of all results

RR 
-> Recursion [TC: O(2^N) | SC: O(N) + stack space O(N)] 
-> DP (Memoization; top-down, recursive) [TC: O(N) | SC: O(N) + stack space O(N)] 
-> DP (Tabulation; bottom-up, iterative) [TC: O(N) | SC: O(N)]
-> DP (Space Optimization, iterative)  [TC: O(N) | SC: O(1)] 

NOTE: Space Optimization is possible ONLY if terms like dp[i-1], dp[i-2] etc exist in Tabulation

Recursion to DP 

1. Create dp array of n+1 and initialize it to -1
2. When calling a recursion, check if previously 
   computed (and stored) in dp array
3. Before returning, store result in dp array
